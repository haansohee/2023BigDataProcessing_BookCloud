# -*- coding: utf-8 -*-
"""book_cloud.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Siy8shURaVoguaL4maqTYzR0yQYJtxjt

**폰트 설정**
"""

import matplotlib.font_manager as fm
import matplotlib.pyplot as plt

!apt-get -qq -y install fonts-nanum > /dev/null
fe = fm.FontEntry(
    fname=r'/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf',
    name='NanumGothic')
fm.fontManager.ttflist.insert(0, fe)
plt.rcParams.update({'font.size': 18, 'font.family': 'NanumGothic'})

# 런타임 재시작
import os
os.kill(os.getpid(), 9)

import matplotlib as mpl
import matplotlib.font_manager as fm

# 마이너스 표시 문제
mpl.rcParams['axes.unicode_minus'] = False

# 한글 폰트 설정
fe = fm.FontEntry(
    fname=r'/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf',
    name='NanumGothic')
fm.fontManager.ttflist.insert(0, fe)
plt.rcParams.update({'font.size': 15, 'font.family': 'NanumGothic'})

"""셀레니움 설치"""

import sys

!sudo add-apt-repository ppa:saiarcot895/chromium-beta #실행 결과에서 Enter 입력
!sudo apt remove chromium-browser
!sudo snap remove chromium
!sudo apt install chromium-browser

!pip3 install selenium
!apt-get update
!apt install chromium-chromedriver
!cp /usr/lib/chromium-browser/chromedriver /usr/bin

sys.path.insert(0,'/usr/lib/chromium-browser/chromedriver')

"""# **DataFrame에 '설명', '카테고리' column 추가하기**

1.  파일 읽어오기


"""

import pandas as pd

book_data = pd.read_csv('/content/231105_book_information.csv', engine='python', encoding='CP949')
book_data

"""2.  결측치 제거: 'ISBN번호' 컬럼에 결측치가 있는 행 제거


"""

book_data.dropna(subset=['ISBN번호'], how='any', axis=0, inplace=True)
book_data

"""3. 2000개가 넘는 책 데이터를 Top100, 100개로 조정하기"""

top100_book_data = []
while True:
    index = book_data['대출횟수'].idxmax()
    top100_book_data.append(book_data.iloc[index])


    if len(top100_book_data) == 100:
        top100_book_data = pd.DataFrame(top100_book_data, columns=['제어번호', '제목', '저자', '발행처', '발행년도', 'ISBN번호', '분류기호', '대출횟수'])
        top100_book_data.reset_index(drop=True, inplace=True)
        break

    book_data.drop(index, inplace=True)

top100_book_data

"""3. 네이버 책 API 호출하여 도서의 설명, 링크 가져오기
4. 가져온 링크로 책의 카테고리 가져오기


"""

import json
import client_id
import os
import sys
import urllib.request
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By

id=client_id.id
secret = client_id.secret

service = Service(executable_path=r'/usr/bin/chromedriver')
options = webdriver.ChromeOptions()
options.add_argument('--headless') #창이 나타나지 않도록 Headless 설정하기
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
driver = webdriver.Chrome(service=service, options=options)

description = []
category = []

print(top100_book_data.iloc[57][5])
print(top100_book_data.iloc[58][5])

for i in range(0, 100):

  book_isbn = urllib.parse.quote(top100_book_data.iloc[i][5])
  url = 'https://openapi.naver.com/v1/search/book_adv.json?d_isbn=' + book_isbn
  request = urllib.request.Request(url)
  request.add_header("X-Naver-Client-Id", id)
  request.add_header("X-Naver-Client-Secret", secret)
  response = urllib.request.urlopen(request)
  response_code = response.getcode()

  print(i, ':', book_isbn)

  if response_code == 200:
    response_body = response.read().decode('utf-8')
    result = json.loads(response_body)['items']

    if not result:
      result_description = '?'
      result_category = '?'
    else:
      print(result)
      result_description = result[0]['description']
      book_link = result[0]['link']
      driver.get(book_link)
      result_category = driver.find_element(By.XPATH,'//*[@id="book_section-info"]/div[2]/ul/li[1]/div/div[2]').text
      description.append(result_description)
      category.append(result_category)
      print(result_category)

  else:
    print("Error Code: ", reponse_code)

top100_book_data['설명'] = description
top100_book_data['카테고리'] = category
top100_book_data.to_csv('/content/top100_information.csv')
top100_book_data

"""# **100개의 도서 카테고리 별 대출 횟수 시각화**

1.   100개의 도서를 카테고리 별로 분류하기
"""

category_group = top100_book_data.groupby(['카테고리'])['대출횟수'].sum()
category_group = pd.DataFrame(category_group, columns=['대출횟수'])
category_group

"""2. Top100 도서 카테고리 별 대출 횟수 시각화 하기"""

import plotly.express as px

fig = px.bar(category_group, x=category_group.index, y=category_group.columns,
             color=category_group.index, color_continuous_scale=px.colors.diverging.PiYG, text_auto=True,
             title='Top100 카테고리 별 대출 횟수', labels={'x': '카테고리', 'y': '대출횟수'})
fig.show()

"""# **(11월 5일 일자) 서울 도서관의 인기 대출 도서 100개 중 상위 10개 도서 설명 시각화**

1.   대출횟수가 높은 10개의 도서 데이터프레임 생성
"""

top10bookData = []
temp_top100_book = top100_book_data.copy()
while True:
    index = temp_top100_book['대출횟수'].idxmax()
    top10bookData.append(temp_top100_book.iloc[index])

    if len(top10bookData) == 10:
        top10book = pd.DataFrame(top10bookData, columns=['제어번호', '제목', '저자', '발행처', '발행년도', 'ISBN번호', '분류기호', '대출횟수', '카테고리', '설명'])
        top10book.reset_index(drop=True, inplace=True)
        break

    temp_top100_book.drop(index, inplace=True)

top10book.to_csv('/content/top10_information.csv')
top10book

"""2. Top10 도서 대출횟수 시각화"""

fig2 = px.bar(top10book, x='제목', y='대출횟수', color='제목', color_continuous_scale=px.colors.diverging.PiYG,
              text_auto=True, title='Top10 도서 대출 횟수')
fig2.show()

"""3. Top10 도서 카테고리 별 대출 횟수 시각화"""

# fig3 = px.pie(values=top10book['대출횟수'], names=top10book['카테고리'])

fig3 = px.bar(top10book, x='카테고리', y='대출횟수',
             color='카테고리', color_continuous_scale=px.colors.diverging.PiYG, text_auto=True,
             title='Top10 카테고리 별 대출 횟수')
fig3.show()

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# apt-get update
# apt-get install g++ openjdk-8-jdk python-dev python3-dev
# pip3 install JPype1
# pip3 install konlpy

"""# **Top10 도서 설명 워드 클라우드**

1.   {제목: 설명} 형태의 딕셔너리 생성하기
"""

from konlpy.tag import Okt
from collections import Counter

book_description = {}

for i in range(0, len(top10book)):
  title = top10book.iloc[i][1]
  description = top10book.iloc[i][9]
  book_description[title] = description

"""2. 도서 설명의 품사 태깅: 명사 추출"""

okt = Okt()
description_tag = {}

for key, value in book_description.items():
  description_tag[key] = okt.nouns(value)
  print('책 제목:', key)
  print(okt.nouns(value))
  print('--------------')

"""3. 단어 빈도 탐색"""

word_dict = dict()

for key, value in description_tag.items():
  count = Counter(value)
  print('책 제목: ', key)
  word_count = dict()
  for tag, counts in count.most_common(80):
    if(len(str(tag)) > 1):
      word_count[tag] = counts
      print("%s: %d" % (tag, counts))
  word_dict[key]=word_count

!apt-get update -qq
!apt-get install fonts-nanum* -qq

import matplotlib.font_manager as fm
import matplotlib

from matplotlib import rc
font_path = "/content/BMJUA_ttf.ttf"
font_name = fm.FontProperties(fname = font_path).get_name()
matplotlib.rc('font', family=font_name)

"""**워드클라우드**"""

from wordcloud import WordCloud

word_cloud = WordCloud(font_path, background_color = 'white',
                       width=800,
                       height=600, colormap='Paired')

for key, value in word_dict.items():
  print(key)
  cloud = word_cloud.generate_from_frequencies(value)
  plt.figure(figsize=(8,8))
  plt.imshow(cloud)
  plt.axis('off')
  plt.show()
  cloud.to_file(key + '_cloud.jpg')

